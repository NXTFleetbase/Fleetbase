import Component from '@glimmer/component';
import DataTransferWrapper from "../data-transfer-wrapper-c7579184.js";
import { UploadFile } from "../upload-file-2bad5ca1.js";
import FileQueueService from "../file-queue-c1330945.js";
import { FileUploadDragEvent, FileDropzoneArgs, DragListenerModifierSignature, DragEventListener, QueuedDragEvent, DragListenerHandlers } from "../interfaces-8d97937f.js";
import Modifier from "ember-modifier";
import { ArgsFor, NamedArgs } from "ember-modifier";
import { EmberRunTimer } from "@ember/runloop/types";
import Owner from "@ember/owner";
declare class DragListener {
    _dropzone?: Element;
    _listeners: DragEventListener[];
    _stack: DragEventListener[];
    _listener: DragEventListener | null;
    // Keep a stack of deferred actions to take
    // on listeners to provide sane events.
    // `dragleave` / `dragenter` are called on the
    // same element back to back, which isn't what
    // we want to provide as an API.
    _events: QueuedDragEvent[];
    _handlers: DragListenerHandlers;
    _handlersAttached: boolean;
    _scheduled: EmberRunTimer | null;
    constructor(dropzone: Element);
    beginListening(): void;
    endListening(): void;
    addEventListeners(handlers: DragListenerHandlers): void;
    removeEventListeners(): void;
    findListener(evt: DragEvent): DragEventListener | undefined;
    getEventSource(evt: DragEvent): "os" | "web";
    getDataTransferItemDetails(evt: DragEvent): {
        kind: string;
        type: string;
    }[];
    dragenter(evt: DragEvent): void;
    dragleave(evt: DragEvent): void;
    dragover(evt: DragEvent): void;
    scheduleEvent(eventName: QueuedDragEvent["eventName"], listener: QueuedDragEvent["listener"], event: QueuedDragEvent["event"]): void;
    sendEvents(): void;
    drop(evt: DragEvent): void;
}
declare class DragListenerModifier extends Modifier<DragListenerModifierSignature> {
    listener?: DragListener;
    constructor(owner: Owner, args: ArgsFor<DragListenerModifierSignature>);
    modify(dropzone: Element, _: [
    ], { dragenter, dragleave, dragover, drop }: NamedArgs<DragListenerModifierSignature>): void;
}
/**
  `FileDropzone` is a component that will allow users to upload files by
   drag and drop.

  ```hbs
  <FileDropzone @queue={{queue}} as |dropzone|>
    {{#if dropzone.active}}
      Drop to upload
    {{else if queue.files.length}}
      Uploading {{queue.files.length}} files. ({{queue.progress}}%)
    {{else}}
      <h4>Upload Images</h4>
      <p>
        {{#if dropzone.supported}}
          Drag and drop images onto this area to upload them or
        {{/if}}
      </p>
    {{/if}}
  </FileDropzone>
  ```

  @class FileDropzoneComponent
  @type Ember.Component
  @yield {Hash} dropzone
  @yield {boolean} dropzone.supported
  @yield {boolean} dropzone.active
  @yield {Queue} queue
 */
declare class FileDropzoneComponent extends Component<FileDropzoneArgs> {
    fileQueue: FileQueueService;
    active: boolean;
    dataTransferWrapper?: DataTransferWrapper;
    supported: boolean;
    get queue(): import("../index.js").Queue;
    get multiple(): boolean;
    get files(): File[];
    get isAllowed(): boolean | undefined;
    get cursor(): "copy" | "link" | "none" | "move";
    didEnterDropzone(event: FileUploadDragEvent): void;
    didLeaveDropzone(event: FileUploadDragEvent): void;
    didDragOver(event: FileUploadDragEvent): void;
    didDrop(event: FileUploadDragEvent): void;
    addFiles(files: File[]): UploadFile[];
    dragListener: typeof DragListenerModifier;
}
export { FileDropzoneComponent as default };
//# sourceMappingURL=components/file-dropzone.d.ts.map