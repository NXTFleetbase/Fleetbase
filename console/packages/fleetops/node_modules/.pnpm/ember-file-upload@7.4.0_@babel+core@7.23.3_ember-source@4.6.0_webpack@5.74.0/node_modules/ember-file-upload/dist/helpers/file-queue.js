import { _ as _applyDecoratedDescriptor, a as _initializerDefineProperty, D as DEFAULT_QUEUE } from '../file-queue-b7de1781.js';
import Helper from '@ember/component/helper';
import { registerDestructor } from '@ember/destroyable';
import { inject } from '@ember/service';

var _class, _descriptor;
/**
 * `file-queue` helper is one of the core primitives of ember-file-upload.
 *
 * @example
 *
 * using the default queue (no `name` property)
 *
 * ```hbs
 * {{#let (file-queue) as |queue|}}
 *   {{queue.progress}}%
 * {{/let}}
 * ```
 *
 * @example
 *
 * named queue:
 *
 * ```hbs
 * {{#let (file-queue name="photos") as |queue|}}
 *   {{queue.progress}}%
 * {{/let}}
 * ```
 */
let FileQueueHelper = (_class = class FileQueueHelper extends Helper {
  constructor(...args) {
    super(...args);
    _initializerDefineProperty(this, "fileQueue", _descriptor, this);
  }
  compute(_positional, args) {
    this.args = args;
    const queue = this.fileQueue.findOrCreate(args.name ?? DEFAULT_QUEUE);
    queue.addListener(this);
    registerDestructor(this, () => {
      queue.removeListener(this);
    });
    return queue;
  }
  onFileAdded(file) {
    this.args.onFileAdded?.(file);
  }
  onFileRemoved(file) {
    this.args.onFileRemoved?.(file);
  }
  onUploadStarted(file) {
    this.args.onUploadStarted?.(file);
  }
  onUploadSucceeded(file, response) {
    this.args.onUploadSucceeded?.(file, response);
  }
  onUploadFailed(file, response) {
    this.args.onUploadFailed?.(file, response);
  }
}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "fileQueue", [inject], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class);

export { FileQueueHelper as default };
//# sourceMappingURL=file-queue.js.map
