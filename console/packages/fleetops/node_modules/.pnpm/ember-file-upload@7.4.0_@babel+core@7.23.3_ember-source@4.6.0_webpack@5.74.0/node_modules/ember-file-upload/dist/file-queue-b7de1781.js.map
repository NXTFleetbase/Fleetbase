{"version":3,"file":"file-queue-b7de1781.js","sources":["../../node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js","../../node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js","../../node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/classApplyDescriptorGet.js","../../node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js","../../node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js","../../node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js","../../node_modules/.pnpm/@babel+runtime@7.21.0/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js","../src/interfaces.ts","../src/system/upload.ts","../src/upload-file.ts","../src/queue.ts","../src/services/file-queue.ts"],"sourcesContent":["export default function _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}","export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}","export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}","import classApplyDescriptorGet from \"./classApplyDescriptorGet.js\";\nimport classExtractFieldDescriptor from \"./classExtractFieldDescriptor.js\";\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classExtractFieldDescriptor from \"./classExtractFieldDescriptor.js\";\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","import type { UploadFile } from './upload-file';\nimport type { Queue } from './queue';\nimport type FileQueueService from './services/file-queue';\nimport type DataTransferWrapper from './system/data-transfer-wrapper';\n\nexport interface FileQueueArgs {\n  name?: string;\n  onFileAdded?: (file: UploadFile) => void;\n  onFileRemoved?: (file: UploadFile) => void;\n  onUploadStarted?: (file: UploadFile) => void;\n  onUploadSucceeded?: (file: UploadFile, response: Response) => void;\n  onUploadFailed?: (file: UploadFile, response: Response) => void;\n}\n\ndeclare module '@ember/service' {\n  interface Registry {\n    'file-queue': FileQueueService;\n  }\n}\n\nexport interface QueueListener {\n  onFileAdded?(file: UploadFile): void;\n  onFileRemoved?(file: UploadFile): void;\n  onUploadStarted?(file: UploadFile): void;\n  onUploadSucceeded?(file: UploadFile, response: Response): void;\n  onUploadFailed?(file: UploadFile, response: Response): void;\n}\n\nexport type QueueName = string | symbol;\n\n/**\n * Possible file states.\n *\n * @remarks\n *\n * Here is the statechart describing the flow of state:\n *\n * ```\n *       .------.     .---------.     .--------.\n *   o--| queued |-->| uploading |-->| uploaded |\n *       `------`     `---------`     `--------`\n *          ^              |    .-------.\n *          |              |`->| aborted |\n *          |              |    `-------`\n *          |  .------.    |    .---------.\n *          `-| failed |<-` `->| timed_out |-.\n *          |  `------`         `---------`  |\n *          `-------------------------------`\n * ```\n */\nexport enum FileState {\n  Queued = 'queued',\n  Uploading = 'uploading',\n  TimedOut = 'timed_out',\n  Aborted = 'aborted',\n  Uploaded = 'uploaded',\n  Failed = 'failed',\n}\n\nexport enum FileSource {\n  /**\n   * the file is created using the native file picker\n   */\n  Browse = 'browse',\n\n  /**\n   * the file was created using drag and drop from their desktop\n   */\n  DragAndDrop = 'drag-and-drop',\n\n  /**\n   * the file was created by dragging the file from another webpage\n   */\n  Web = 'web',\n\n  /**\n   * the file is created from a data URL using the `fromDataURL`\n   * method for files. This usually means that the file was created\n   * manually by the developer on behalf of the user\n   */\n  DataUrl = 'data-url',\n\n  /**\n   * the file is created from a blob using the `fromBlob`\n   * method for files. This usually means that the file was created\n   * manually by the developer\n   */\n  Blob = 'blob',\n}\n\nexport interface FileDropzoneArgs {\n  queue?: Queue;\n\n  /**\n   * Whether users can upload content from websites by dragging images from\n   * another webpage and dropping it into your app. The default is `false`\n   * to prevent cross-site scripting issues.\n   *\n   * @defaulValue false\n   * */\n  allowUploadsFromWebsites?: boolean;\n\n  /**\n   * This is the type of cursor that should\n   * be shown when a drag event happens.\n   *\n   * Corresponds to `DataTransfer.dropEffect`.\n   * (https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect)\n   *\n   * @defaultValue 'copy'\n   */\n  cursor?: 'link' | 'none' | 'copy' | 'move';\n\n  /**\n   * Whether to add multiple files to the queue at once.\n   *\n   * If set to false only one file will be added when dropping mulitple files.\n   *\n   * @defaultValue true\n   */\n  multiple?: boolean;\n\n  // actions\n  filter?: (file: File, files: File[], index: number) => boolean;\n\n  /**\n   * Called when files have entered the dropzone.\n   */\n  onDragEnter?: (files: File[], dataTransfer: DataTransferWrapper) => void;\n\n  /**\n   * Called when files have left the dropzone.\n   */\n  onDragLeave?: (files: File[], dataTransfer: DataTransferWrapper) => void;\n\n  /**\n   * Called when file have been dropped on the dropzone.\n   */\n  onDrop?: (files: UploadFile[], dataTransfer: DataTransferWrapper) => void;\n}\n\nexport interface FileUploadDragEvent extends DragEvent {\n  source: 'os' | 'web';\n  dataTransfer: DataTransfer;\n  itemDetails: DataTransferItem[];\n}\n\nexport interface UploadOptions {\n  url?: string;\n  method?: string;\n  accepts?: string[];\n  headers?: Record<string, string>;\n  fileKey?: string;\n  contentType?: string;\n  data?: Record<string, string | File>;\n  withCredentials?: boolean;\n  timeout?: number;\n}\n\nexport interface HTTPRequestOptions {\n  label?: string;\n  withCredentials?: boolean;\n  timeout?: number;\n}\n\nexport interface HTTPRequestResponse {\n  status: number;\n  body: string | Document | HTMLElement[] | null | undefined;\n  headers: Record<string, string>;\n}\n\nexport interface DragListenerModifierSignature {\n  Args: {\n    Named: DragListenerHandlers;\n  };\n}\n\ntype DragListenerHandler = (event: DragEvent | SyntheticDragEvent) => void;\n\nexport interface DragListenerHandlers {\n  dragenter?: DragListenerHandler;\n  dragleave?: DragListenerHandler;\n  dragover?: DragListenerHandler;\n  drop?: DragListenerHandler;\n}\n\nexport interface DragEventListener {\n  element: Element;\n  handlers: DragListenerHandlers;\n}\n\nexport interface QueuedDragEvent {\n  eventName: 'dragenter' | 'dragleave' | 'dragover' | 'drop';\n  listener: DragEventListener;\n  event: DragEvent | SyntheticDragEvent;\n}\n\nexport interface SyntheticDragEvent {\n  source: FileUploadDragEvent['source'];\n  dataTransfer: DataTransfer | null;\n  itemDetails: Array<{\n    kind: string;\n    type: string;\n  }>;\n}\n","import { assert } from '@ember/debug';\nimport HTTPRequest from './http-request';\nimport RSVP from 'rsvp';\nimport { waitForPromise } from '@ember/test-waiters';\nimport type { UploadFile } from '../upload-file';\nimport { FileState, UploadOptions } from '../interfaces';\n\nfunction clone(object: object | undefined) {\n  return object ? { ...object } : {};\n}\n\nfunction normalizeOptions(\n  file: UploadFile,\n  url: string | object | undefined,\n  options?: UploadOptions\n) {\n  if (typeof url === 'object') {\n    options = url;\n    url = undefined;\n  }\n\n  options = clone(options);\n\n  options.url = options.url || url;\n  options.method = options.method || 'POST';\n  options.accepts = options.accepts || ['application/json', 'text/javascript'];\n  if (!Object.prototype.hasOwnProperty.call(options, 'contentType')) {\n    options.contentType = file.type;\n  }\n  options.headers = clone(options.headers);\n  options.data = clone(options.data);\n  options.fileKey = options.fileKey || 'file';\n\n  if (options.headers.Accept == null) {\n    if (!Array.isArray(options.accepts)) {\n      options.accepts = [options.accepts];\n    }\n    options.headers.Accept = options.accepts.join(',');\n  }\n\n  // Set Content-Type in the data payload\n  // instead of the headers, since the header\n  // for Content-Type will always be multipart/form-data\n  if (options.contentType) {\n    options.data['Content-Type'] = options.contentType;\n  }\n\n  options.data[options.fileKey] = file.file;\n\n  options.withCredentials = options.withCredentials || false;\n\n  return options;\n}\n\nexport function upload(\n  file: UploadFile,\n  url: string | object,\n  opts: UploadOptions | undefined,\n  uploadFn: (request: HTTPRequest, options: UploadOptions) => Promise<Response>\n) {\n  if (['queued', 'failed', 'timed_out', 'aborted'].indexOf(file.state) === -1) {\n    assert(\n      `The file ${file.id} is in the state \"${file.state}\" and cannot be requeued.`\n    );\n  }\n\n  const options = normalizeOptions(file, url, opts);\n\n  const request = new HTTPRequest({\n    withCredentials: options.withCredentials,\n    label: `${options.method} ${file.name} to ${options.url}`,\n  });\n\n  request.open(options.method ?? 'POST', options.url ?? '', true, '', '');\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  Object.keys(options.headers).forEach(function (key) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    request.setRequestHeader(key, options.headers[key]);\n  });\n\n  if (options.timeout) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    request.timeout = options.timeout;\n  }\n\n  request.onprogress = function (evt) {\n    if (!evt) return;\n    if (!evt.lengthComputable || evt.total === 0) return;\n\n    file.loaded = evt.loaded;\n    file.size = evt.total;\n    file.progress = (evt.loaded / evt.total) * 100;\n  };\n\n  request.ontimeout = () => {\n    file.state = FileState.TimedOut;\n    file.queue?.flush();\n  };\n  request.onabort = () => {\n    file.state = FileState.Aborted;\n    file.queue?.flush();\n  };\n  file.state = FileState.Uploading;\n\n  return waitForPromise(\n    uploadFn(request, options)\n      .then(function (response) {\n        file.state = FileState.Uploaded;\n        file.queue?.uploadSucceeded(file, response);\n        return response;\n      })\n      .catch(function (response) {\n        file.state = FileState.Failed;\n        file.queue?.uploadFailed(file, response);\n        return RSVP.reject(response);\n      })\n      .finally(() => file.queue?.flush())\n  );\n}\n","import { tracked } from '@glimmer/tracking';\n\nimport { upload } from './system/upload';\nimport HTTPRequest from './system/http-request';\nimport UploadFileReader from './system/upload-file-reader';\n\nimport type { Queue } from './queue';\nimport { guidFor } from '@ember/object/internals';\nimport RSVP from 'rsvp';\nimport { FileSource, FileState, UploadOptions } from './interfaces';\n\n/**\n * Files provide a uniform interface for interacting\n * with data that can be uploaded or read.\n */\nexport class UploadFile {\n  file: File;\n  #source: FileSource;\n\n  queue?: Queue;\n\n  constructor(file: File, source: FileSource) {\n    this.file = file;\n    this.#source = source;\n  }\n\n  /**\n   * The source of the file. This is useful\n   * for applications that want to gather\n   * analytics about how users upload their\n   * content.\n   */\n  get source(): FileSource {\n    return this.#source;\n  }\n\n  #id = `file-${guidFor(this)}`;\n\n  /** A unique id generated for this file. */\n  get id(): string {\n    return this.#id;\n  }\n\n  #name?: string;\n\n  /** The file name */\n  get name(): string {\n    return this.#name ?? this.file?.name;\n  }\n  set name(value: string) {\n    this.#name = value;\n  }\n\n  #size = 0;\n\n  /** The size of the file in bytes. */\n  get size() {\n    return this.#size || this.file.size;\n  }\n\n  set size(value) {\n    this.#size = value;\n  }\n\n  /**\n   * The MIME type of the file.\n   *\n   * For a image file this may be `image/png`.\n   */\n  get type(): string {\n    return this.file.type;\n  }\n\n  /**\n   * Returns the appropriate file extension of\n   * the file according to the type\n   */\n  get extension(): string {\n    return this.type.split('/').slice(-1)[0];\n  }\n\n  /** The number of bytes that have been uploaded to the server */\n  @tracked loaded = 0;\n\n  /**\n   * The current progress of the upload, as a percentage in the\n   * range of 0 to 100.\n   */\n  @tracked progress = 0;\n\n  /**\n   * The current state that the file is in.\n   */\n  @tracked state: FileState = FileState.Queued;\n\n  // /**\n  //   The source of the file. This is useful\n  //   for applications that want to gather\n  //   analytics about how users upload their\n  //   content.\n\n  //   This property can be one of the following:\n\n  //   - `browse`\n  //   - `drag-and-drop`\n  //   - `web`\n  //   - `data-url`\n  //   - `blob`\n\n  //   `browse` is the source when the file is created\n  //   using the native file picker.\n\n  //   `drag-and-drop` is the source when the file was\n  //   created using drag and drop from their desktop.\n\n  //   `web` is the source when the file was created\n  //   by dragging the file from another webpage.\n\n  //   `data-url` is the source when the file is created\n  //   from a data URL using the `fromDataURL` method for\n  //   files. This usually means that the file was created\n  //   manually by the developer on behalf of the user.\n\n  //   `blob` is the source when the file is created\n  //   from a blob using the `fromBlob` method for\n  //   files. This usually means that the file was created\n  //   manually by the developer.\n\n  //   @accessor source\n  //   @type {String}\n  //   @default ''\n  //   @readonly\n  //  */\n  // source?: FileSource;\n\n  /**\n   * Upload file with `application/octet-stream` content type.\n   *\n   * @param url Your server endpoint where to upload the file\n   * @param options additional request options\n   */\n  uploadBinary(url: string, options: UploadOptions) {\n    options.contentType = 'application/octet-stream';\n    return upload(this, url, options, (request) => {\n      this.queue?.uploadStarted(this);\n      return request.send(this.file);\n    });\n  }\n\n  /**\n   * Upload file to your server\n   *\n   * @param url Your server endpoint where to upload the file\n   * @param options additional options, eg. `{ fileKey: string, data: { key: string } }`\n   */\n  upload(url: string, options?: UploadOptions) {\n    return upload(\n      this,\n      url,\n      options,\n      (request: HTTPRequest, opts: UploadOptions): RSVP.Promise<Response> => {\n        // Build the form\n        const form = new FormData();\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        for (const key of Object.keys(opts.data)) {\n          if (key === opts.fileKey) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            form.append(key, opts.data[key], this.name);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            form.append(key, opts.data[key]);\n          }\n        }\n\n        this.queue?.uploadStarted(this);\n        return request.send(form);\n      }\n    );\n  }\n\n  /**\n   * Resolves with Blob as ArrayBuffer\n   */\n  readAsArrayBuffer() {\n    const reader = new UploadFileReader({\n      label: `Read ${this.name} as an ArrayBuffer`,\n    });\n    return reader.readAsArrayBuffer(this.file);\n  }\n\n  /**\n   * Resolves with Blob as DataURL\n   */\n  readAsDataURL() {\n    const reader = new UploadFileReader({\n      label: `Read ${this.name} as a Data URI`,\n    });\n    return reader.readAsDataURL(this.file);\n  }\n\n  /**\n   * Resolves with Blob as binary string\n   */\n  readAsBinaryString() {\n    const reader = new UploadFileReader({\n      label: `Read ${this.name} as a binary string`,\n    });\n    return reader.readAsBinaryString(this.file);\n  }\n\n  /**\n   * Resolves with Blob as plain text\n   */\n  readAsText() {\n    const reader = new UploadFileReader({ label: `Read ${this.name} as text` });\n    return reader.readAsText(this.file);\n  }\n\n  /**\n   * Creates a file object that can be read or uploaded to a\n   * server from a Blob object.\n   *\n   * @param blob the blob to create the file from.\n   * @param source the source that created the blob.\n   * @returns the file\n   */\n  static fromBlob(blob: Blob, source = FileSource.Blob) {\n    const file = new File([blob], 'blob', { type: blob.type });\n    return new this(file, source);\n  }\n\n  /**\n   * Creates a file object that can be read or uploaded to a\n   * server from a data URL.\n   *\n   * @param dataURL the data URL to create the file from.\n   * @param source the source of the data URL.\n   * @returns the file\n   */\n  static fromDataURL(dataURL: string, source = FileSource.DataUrl) {\n    const [typeInfo, base64String] = dataURL.split(',');\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const mimeType = typeInfo.match(/:(.*?);/)[1];\n\n    const binaryString = atob(base64String);\n    const binaryData = new Uint8Array(binaryString.length);\n\n    for (let i = 0, len = binaryString.length; i < len; i++) {\n      binaryData[i] = binaryString.charCodeAt(i);\n    }\n\n    const blob = new Blob([binaryData], { type: mimeType });\n\n    return this.fromBlob(blob, source);\n  }\n}\n","import { action } from '@ember/object';\nimport { modifier } from 'ember-modifier';\nimport { TrackedSet } from 'tracked-built-ins';\nimport { UploadFile } from './upload-file';\nimport type FileQueueService from './services/file-queue';\nimport { FileSource, FileState, QueueListener, QueueName } from './interfaces';\n\n/**\n * The Queue is a collection of files that\n * are being manipulated by the user.\n *\n * Queues are designed to persist the state\n * of uploads when a user navigates around your\n * application.\n */\nexport class Queue {\n  #listeners: Set<QueueListener> = new Set();\n\n  #name: QueueName;\n\n  /**\n   * The unique identifier of the queue.\n   *\n   * @remarks\n   * Queue names should be deterministic so they\n   * can be retrieved. It's recommended to provide\n   * a helpful name.\n   *\n   * If the queue belongs to a top level collection,\n   * photos, the good name for this queue may be `\"photos\"`.\n   *\n   * If you're uploading images to an artwork, the\n   * best name would incoporate both `\"artworks\"` and\n   * the identifier of the artwork. A good name for this\n   * queue may be `\"artworks/{{id}}/photos\"`, where `{{id}}`\n   * is a dynamic segment that is generated from the artwork id.\n   */\n  get name(): QueueName {\n    return this.#name;\n  }\n\n  /** The FileQueue service. */\n  fileQueue: FileQueueService;\n\n  #distinctFiles: Set<UploadFile> = new TrackedSet();\n\n  /**\n   * The list of files in the queue. This automatically gets\n   * flushed when all the files in the queue have settled.\n   *\n   * @remarks\n   * Note that files that have failed need to be manually\n   * removed from the queue. This is so they can be retried\n   * without resetting the state of the queue, orphaning the\n   * file from its queue. Upload failures can happen due to a\n   * timeout or a server response. If you choose to use the\n   * `abort` method, the file will fail to upload, but will\n   * be removed from the requeuing proccess, and will be\n   * considered to be in a settled state.\n   *\n   * @defaultValue []\n   */\n  get files(): UploadFile[] {\n    return [...this.#distinctFiles.values()];\n  }\n\n  /**\n   * The total size of all files currently being uploaded in bytes.\n   *\n   * @defaultValue 0\n   */\n  get size(): number {\n    return this.files.reduce((acc, { size }) => {\n      return acc + size;\n    }, 0);\n  }\n\n  /**\n   * The number of bytes that have been uploaded to the server.\n   *\n   * @defaultValue 0\n   */\n  get loaded(): number {\n    return this.files.reduce((acc, { loaded }) => {\n      return acc + loaded;\n    }, 0);\n  }\n\n  /**\n   * The current progress of all uploads, as a percentage in the\n   * range of 0 to 100.\n   *\n   * @defaultValue 0\n   */\n  get progress() {\n    const percent = this.loaded / this.size || 0;\n    return Math.floor(percent * 100);\n  }\n\n  constructor({\n    name,\n    fileQueue,\n  }: {\n    name: QueueName;\n    fileQueue: FileQueueService;\n  }) {\n    this.#name = name;\n    this.fileQueue = fileQueue;\n  }\n\n  addListener(listener: QueueListener) {\n    this.#listeners.add(listener);\n  }\n\n  removeListener(listener: QueueListener) {\n    this.#listeners.delete(listener);\n  }\n\n  /**\n   * Add a file to the queue\n   * @param file the file to be added\n   */\n  @action\n  add(file: UploadFile) {\n    if (this.#distinctFiles.has(file)) {\n      return;\n    }\n\n    file.queue = this;\n    this.#distinctFiles.add(file);\n\n    for (const listener of this.#listeners) {\n      listener.onFileAdded?.(file);\n    }\n  }\n\n  /**\n   * Remove a file from the queue\n   * @param file the file to be removed\n   */\n  @action\n  remove(file: UploadFile) {\n    if (!this.#distinctFiles.has(file)) {\n      return;\n    }\n\n    file.queue = undefined;\n    this.#distinctFiles.delete(file);\n\n    for (const listener of this.#listeners) {\n      listener.onFileRemoved?.(file);\n    }\n  }\n\n  uploadStarted(file: UploadFile) {\n    for (const listener of this.#listeners) {\n      listener.onUploadStarted?.(file);\n    }\n  }\n\n  uploadSucceeded(file: UploadFile, response: Response) {\n    for (const listener of this.#listeners) {\n      listener.onUploadSucceeded?.(file, response);\n    }\n  }\n\n  uploadFailed(file: UploadFile, response: Response) {\n    for (const listener of this.#listeners) {\n      listener.onUploadFailed?.(file, response);\n    }\n  }\n\n  /**\n   * Flushes the `files` property if they have settled. This\n   * will only flush files when all files have arrived at a terminus\n   * of their state chart (`uploaded` and `aborted`).\n   *\n   * Files *may* be requeued by the user in the `failed` or `timed_out`\n   * states.\n   */\n  flush() {\n    if (this.files.length === 0) {\n      return;\n    }\n\n    const allFilesHaveSettled = this.files.every((file) => {\n      return [FileState.Uploaded, FileState.Aborted].includes(file.state);\n    });\n\n    if (allFilesHaveSettled) {\n      this.files.forEach((file) => (file.queue = undefined));\n      this.#distinctFiles.clear();\n    }\n  }\n\n  selectFile = modifier(\n    (\n      element: HTMLInputElement,\n      _positional: [],\n      {\n        filter,\n        onFilesSelected,\n      }: {\n        filter?: (file: File, files: File[], index: number) => boolean;\n        onFilesSelected?: (files: UploadFile[]) => void;\n      }\n    ) => {\n      const changeHandler = (event: Event) => {\n        const { files: fileList } = event.target as HTMLInputElement;\n        if (!fileList) {\n          return;\n        }\n\n        const files = Array.from(fileList);\n        const selectedFiles: UploadFile[] = [];\n\n        for (const file of files) {\n          if (filter && !filter?.(file, files, files.indexOf(file))) {\n            continue;\n          }\n\n          let uploadFile;\n          if (file instanceof File) {\n            uploadFile = new UploadFile(file, FileSource.Browse);\n          }\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          else if (file instanceof Blob) {\n            uploadFile = UploadFile.fromBlob(file, FileSource.Browse);\n          }\n\n          if (uploadFile) {\n            selectedFiles.push(uploadFile);\n            this.add(uploadFile);\n          }\n        }\n\n        onFilesSelected?.(selectedFiles);\n\n        // this will reset the input, so the _same_ file can be picked again\n        // Without, the `change` event wouldn't be fired, as it is still the same\n        // value\n        element.value = '';\n      };\n      element.addEventListener('change', changeHandler);\n\n      return () => {\n        element.removeEventListener('change', changeHandler);\n      };\n    },\n    // @ts-expect-error ember-modifier@^3 requires an options hash as second argument\n    // used to opt-in to lazy argument handling, which is the default for ember-modifier@^4\n    { eager: false }\n  );\n}\n","import { assert } from '@ember/debug';\nimport Service from '@ember/service';\nimport { registerDestructor } from '@ember/destroyable';\nimport { Queue } from '../queue';\nimport type { UploadFile } from '../upload-file';\nimport { QueueName } from '../interfaces';\nimport { TrackedMap } from 'tracked-built-ins';\n\nexport const DEFAULT_QUEUE = Symbol('DEFAULT_QUEUE');\n\n/**\n * The file queue service is a global file\n * queue that manages all files being uploaded.\n *\n * This service can be used to query the current\n * upload state when a user leaves the app,\n * asking them whether they want to cancel\n * the remaining uploads.\n */\nexport default class FileQueueService extends Service {\n  queues: TrackedMap<QueueName, Queue> = new TrackedMap();\n\n  /**\n   * Identical untracked map to avoid mutating tracked state during rendering\n   * when checking for existing queues.\n   */\n  #queues: Map<QueueName, Queue> = new Map();\n\n  /**\n   * Returns a queue with the given name\n   *\n   * @param name The name of the queue to find\n   * @returns The queue if it exists\n   */\n  find(name: QueueName): Queue | undefined {\n    return this.#queues.get(name);\n  }\n\n  /**\n   * Create a new queue with the given name.\n   *\n   * @param name The name of the queue to create\n   * @returns The new queue.\n   */\n  create(name: QueueName): Queue {\n    assert(\n      `Queue names are required to be unique. \"${String(\n        name\n      )}\" has already been reserved.`,\n      !this.#queues.has(name)\n    );\n\n    const queue = new Queue({ name, fileQueue: this });\n\n    registerDestructor(queue, () => {\n      this.#queues.delete(name);\n      this.queues.delete(name);\n    });\n\n    this.#queues.set(name, queue);\n    this.queues.set(name, queue);\n    return queue;\n  }\n\n  findOrCreate(name: QueueName): Queue {\n    return this.find(name) ?? this.create(name);\n  }\n\n  /**\n   * The list of all files in queues. This automatically gets\n   * flushed when all the files in the queue have settled.\n   *\n   * @remarks\n   * Note that files that have failed need to be manually\n   * removed from the queue. This is so they can be retried\n   * without resetting the state of the queue, orphaning the\n   * file from its queue. Upload failures can happen due to a\n   * timeout or a server response. If you choose to use the\n   * `abort` method, the file will fail to upload, but will\n   * be removed from the requeuing proccess, and will be\n   * considered to be in a settled state.\n   *\n   * @defaultValue []\n   */\n  get files(): UploadFile[] {\n    return [...this.queues.values()].reduce((acc, queue) => {\n      return [...acc, ...queue.files];\n    }, []);\n  }\n\n  /**\n   * The total size of all files currently being uploaded in bytes.\n   *\n   * @defaultValue 0\n   */\n  get size(): number {\n    return this.files.reduce((acc, { size }) => {\n      return acc + size;\n    }, 0);\n  }\n\n  /**\n   * The number of bytes that have been uploaded to the server.\n   *\n   * @defaultValue 0\n   */\n  get loaded(): number {\n    return this.files.reduce((acc, { loaded }) => {\n      return acc + loaded;\n    }, 0);\n  }\n\n  /**\n   * The current progress of all uploads, as a percentage in the\n   * range of 0 to 100.\n   *\n   * @defaultValue 0\n   */\n  get progress(): number {\n    const percent = this.loaded / this.size || 0;\n    return Math.floor(percent * 100);\n  }\n}\n"],"names":["_initializerDefineProperty","target","property","descriptor","context","Object","defineProperty","enumerable","configurable","writable","value","initializer","call","_applyDecoratedDescriptor","decorators","desc","keys","forEach","key","slice","reverse","reduce","decorator","undefined","_classApplyDescriptorGet","receiver","get","_classExtractFieldDescriptor","privateMap","action","has","TypeError","_classPrivateFieldGet","classExtractFieldDescriptor","classApplyDescriptorGet","_classApplyDescriptorSet","set","_classPrivateFieldSet","classApplyDescriptorSet","FileState","FileSource","clone","object","_objectSpread","normalizeOptions","file","url","options","method","accepts","prototype","hasOwnProperty","contentType","type","headers","data","fileKey","Accept","Array","isArray","join","withCredentials","upload","opts","uploadFn","indexOf","state","assert","id","request","HTTPRequest","label","name","open","setRequestHeader","timeout","onprogress","evt","lengthComputable","total","loaded","size","progress","ontimeout","TimedOut","queue","flush","onabort","Aborted","Uploading","waitForPromise","then","response","Uploaded","uploadSucceeded","catch","Failed","uploadFailed","RSVP","reject","finally","UploadFile","_class","_source","WeakMap","_id","_name","_size","constructor","source","_defineProperty","_classPrivateFieldInitSpec","guidFor","_descriptor","_descriptor2","_descriptor3","extension","split","uploadBinary","uploadStarted","send","form","FormData","append","readAsArrayBuffer","reader","UploadFileReader","readAsDataURL","readAsBinaryString","readAsText","fromBlob","blob","Blob","File","fromDataURL","dataURL","DataUrl","typeInfo","base64String","mimeType","match","binaryString","atob","binaryData","Uint8Array","length","i","len","charCodeAt","tracked","Queued","Queue","_listeners","_distinctFiles","files","values","acc","percent","Math","floor","fileQueue","Set","TrackedSet","modifier","element","_positional","filter","onFilesSelected","changeHandler","event","fileList","from","selectedFiles","uploadFile","Browse","push","add","addEventListener","removeEventListener","eager","addListener","listener","removeListener","delete","onFileAdded","remove","onFileRemoved","onUploadStarted","onUploadSucceeded","onUploadFailed","allFilesHaveSettled","every","includes","clear","getOwnPropertyDescriptor","DEFAULT_QUEUE","Symbol","_queues","FileQueueService","Service","args","TrackedMap","Map","find","create","String","registerDestructor","queues","findOrCreate"],"mappings":"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"}