import Registry from './registry';
var noop = function () { };
export var CallbackType;
(function (CallbackType) {
    CallbackType["enter"] = "enter";
    CallbackType["exit"] = "exit";
})(CallbackType || (CallbackType = {}));
var Notifications = /** @class */ (function () {
    function Notifications() {
        this.registry = new Registry();
    }
    /**
     * Adds an EventListener as a callback for an event key.
     * @param type 'enter' or 'exit'
     * @param key The key of the event
     * @param callback The callback function to invoke when the event occurs
     */
    Notifications.prototype.addCallback = function (type, element, callback) {
        var _a, _b;
        var entry;
        if (type === CallbackType.enter) {
            entry = (_a = {}, _a[CallbackType.enter] = callback, _a);
        }
        else {
            entry = (_b = {}, _b[CallbackType.exit] = callback, _b);
        }
        this.registry.addElement(element, Object.assign({}, this.registry.getElement(element), entry));
    };
    /**
     * @hidden
     * Executes registered callbacks for key.
     * @param type
     * @param element
     * @param data
     */
    Notifications.prototype.dispatchCallback = function (type, element, data) {
        if (type === CallbackType.enter) {
            var _a = this.registry.getElement(element).enter, enter = _a === void 0 ? noop : _a;
            enter(data);
        }
        else {
            // no element in WeakMap possible because element may be removed from DOM by the time we get here
            var found = this.registry.getElement(element);
            if (found && found.exit) {
                found.exit(data);
            }
        }
    };
    return Notifications;
}());
export default Notifications;
//# sourceMappingURL=notification.js.map